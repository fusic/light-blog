<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LIGHT BLOG</title>
  
  <subtitle>チームLIGHTの雑記ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://light.fusic.co.jp/"/>
  <updated>2020-08-12T04:41:52.381Z</updated>
  <id>https://light.fusic.co.jp/</id>
  
  <author>
    <name>light</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TDDBC Online 参加レポート</title>
    <link href="https://light.fusic.co.jp/2020/08/12/20200812-kondo/"/>
    <id>https://light.fusic.co.jp/2020/08/12/20200812-kondo/</id>
    <published>2020-08-12T04:30:38.000Z</published>
    <updated>2020-08-12T04:41:52.381Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、近藤です！</p><p>去る 8月1日(土) 、TDDBC Online #1 に @choc-lucy で参加させていただきました。<br>遅ればせながら、イベントレポートを残しておきます！</p><h2 id="TDDBC-とは"><a href="#TDDBC-とは" class="headerlink" title="TDDBC とは"></a>TDDBC とは</h2><blockquote><p>TDD Boot Camp(TDDBC) とは、テスト駆動開発(Test Driven Development)について、座学だけでなく、実習形式で手を動かして体得することを目的とするイベントです。<br>これまで10年以上に渡り、日本各地でそれぞれの地域のコミュニティにより運営されてきました。<br>( <a href="http://devtesting.jp/tddbc/" target="_blank" rel="noopener">http://devtesting.jp/tddbc/</a> )</p></blockquote><p>イベントページは<a href="https://peatix.com/event/1545209" target="_blank" rel="noopener">こちら</a></p><h2 id="準備日"><a href="#準備日" class="headerlink" title="準備日"></a>準備日</h2><p>今回 TDDBC 初のオンライン開催ということで、事前準備を開催2週間前に行いました。</p><h3 id="やったこと"><a href="#やったこと" class="headerlink" title="やったこと"></a>やったこと</h3><ul><li><p>Discord のインストール &amp; サーバーへの参加</p></li><li><p>リモートペアプロデモ</p><ul><li>TA のお二方による、Java を用いたリモートペアプロ&amp;TDDデモ</li><li>チャットでは他のTAさんが質問に答えてくれていました</li><li>これだけで本番かのような満足感がありました。録画しておきたかった！</li></ul></li><li><p>言語ごとのペア決め</p><ul><li>PHP は4人参加だったので、2ペアにわかれました</li></ul></li><li><p>ペアごとに環境構築</p><ul><li>今回は VSCode の LiveShare 機能を使ってコード共有しました</li></ul></li></ul><p>etc…</p><h2 id="当日"><a href="#当日" class="headerlink" title="当日"></a>当日</h2><h3 id="twada-さんによる基調講演"><a href="#twada-さんによる基調講演" class="headerlink" title="twada さんによる基調講演"></a>twada さんによる基調講演</h3><p>配信のアーカイブは<a href="https://www.youtube.com/watch?v=Q-FJ3XmFlT8" target="_blank" rel="noopener">こちら</a>にあります。<br>TODOリスト作成時のタスク分解の鮮やかさ、初見だと震え上がります。<br>チャット欄の質疑応答も勉強になるので<strong>最低2周</strong>は必聴です！</p><p>個人的に印象に残っていることは以下の通り。</p><ul><li><p>TODOリストからタスクを選ぶ基準は「重要かつテスト容易性が高い」もの</p><ul><li>重要なものほどテスト容易性が低い、というのは思い込み！</li></ul></li><li><p>仮実装(=「ひどい茶番」)を経由することで、テストコードのテストを片付ける</p></li><li><p>リファクタリングは辞め時も大事</p><ul><li>サイクルを回すたびにチャンスはくるので、1度に時間をかけすぎないほうがいい</li></ul></li><li><p><a href="http://xunitpatterns.com/Assertion%20Roulette.html" target="_blank" rel="noopener">Assertion Roulette</a>にしない</p><ul><li>ただし、「HTTPステータスが200でそのメッセージはこれで…」のような複数組み合わせが全て成立して意味を成すものなら、複数のAssertionが存在しても良い</li></ul></li></ul><h3 id="ペアプロ-amp-TDD実践"><a href="#ペアプロ-amp-TDD実践" class="headerlink" title="ペアプロ&amp;TDD実践"></a>ペアプロ&amp;TDD実践</h3><p>初めてのペアプロ、初めてのTDD……<br>結論をいえば、ものすごく楽しかったです！</p><p>お題はこちらの<a href="https://gist.github.com/twada/75fb219c8cc180e9de166d8a58e877b0" target="_blank" rel="noopener">閉空間</a>でした。</p><h4 id="1-ペアプロ-amp-TDD"><a href="#1-ペアプロ-amp-TDD" class="headerlink" title="1. ペアプロ &amp; TDD"></a>1. ペアプロ &amp; TDD</h4><hr><p>始めはペアの方と2人して「ナビゲーター」をしている状態だったのが、<br>交代を経るごとに互いの役割を意識してコーディングできるようになりました！<br>うっかり2人で沼に向かっていったとき、TAさんが助言をくれていたのも、スムーズに進められた要因かなと思います。</p><p>おもしろかったポイント</p><ul><li><p>問題文からTODOリストへ落とし込むタスク分解が難しい</p><ul><li>なかなか「テスト容易性が高い」といえるレベルまで分解できなかった</li><li>ある程度で見切りをつけ、分解できなかったものはまた後で考えましょう、としたのは良かった</li><li>後半になるにつれ、タスク分解力が向上していった</li></ul></li><li><p>ペア2人で議論を重ねて合意した設計だったが、仮実装の段階で方針転換した</p><ul><li>基調講演で「TDDでは設計をし続ける」と言われていたのが実感できました</li></ul></li></ul><h4 id="2-レビュー"><a href="#2-レビュー" class="headerlink" title="2. レビュー"></a>2. レビュー</h4><hr><p>中間レビュー2回と最終レビューの計3回、レビューの機会が設けられていました。<br>この時間にTAさんからのフィードバックをもらったり、他ペアのコードを見たり、そのコードについて議論したりしました。</p><p>おもしろかったポイント</p><ul><li><p>他ペアの思考を知れた</p><ul><li>画面共有して、実際のコードとTODOリストを見せてもらいながら、その思考を説明し合いました</li><li>「getterのテストをあえて書かなかった」というあるチームの一言で、そもそもテスト対象として考えていなかったことに気づいたり</li></ul></li><li><p>他言語ペアのコードを見られた</p><ul><li>PHPチームは Ruby, Java チームのコードを見られましたが、言語仕様による設計の違いが出ていておもしろかったです</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ペアプロもTDDも、言葉として知っていても、懐疑的に構えていた節がありました。<br>実践した今となっては「すみませんでした！！！」と言いたいです。<br>設計力は上がるし、品質も向上するし、仕様が1人に留まらないし、いい事だらけです。</p><p>ペアプロを1度経験した人間はハマるという言論を何度か見かけましたが、まさにその通り。<strong>ハマりました</strong>。</p><p>仕事のほうは案件状況的に「今からペアプロしましょう」なんて感じではないので、プライベートでの実践を目論んでいます。<br>TDDは1人で勝手にやっています。たのしー！<br>ここから輪を広げていけたら最高ですね。がんばります！</p><p>以上、近藤によるイベント参加レポートでした！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、近藤です！&lt;/p&gt;
&lt;p&gt;去る 8月1日(土) 、TDDBC Online #1 に @choc-lucy で参加させていただきました。&lt;br&gt;遅ればせながら、イベントレポートを残しておきます！&lt;/p&gt;
&lt;h2 id=&quot;TDDBC-とは&quot;&gt;&lt;a href=&quot;#T
      
    
    </summary>
    
    
      <category term="Kondo" scheme="https://light.fusic.co.jp/categories/Kondo/"/>
    
    
      <category term="イベントレポート" scheme="https://light.fusic.co.jp/tags/%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 142.Linked List Cycle II を解いてみる</title>
    <link href="https://light.fusic.co.jp/2020/07/23/1/"/>
    <id>https://light.fusic.co.jp/2020/07/23/1/</id>
    <published>2020-07-23T11:42:08.000Z</published>
    <updated>2020-08-11T05:42:23.673Z</updated>
    
    <content type="html"><![CDATA[<p>今回は、笹平が担当です。</p><p>LeetCodeというアルゴリズムが学べるサービスがあるので、その中の問題の一つを解いてみました。<br>ちなみに、linked listとは日本語で連結リストと呼ばれ、要素同士がそれぞれリンク情報をもっており、繋がっています。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/linked-list-cycle-ii/</a></p><img src="/2020/07/23/1/question.png" class=""><h3 id="日本語訳"><a href="#日本語訳" class="headerlink" title="日本語訳"></a>日本語訳</h3><p>リンクされたリストが与えられた場合、サイクルが始まるノードを返します。サイクルがない場合はnullを返します。</p><p>与えられたリンクリスト内のサイクルを表現するには、リンクリスト内の末尾が接続する位置（インデックス0）を表す整数posを使用します。posが-1の場合、リンク先リストにはサイクルはありません。</p><img src="/2020/07/23/1/figure1.png" class=""><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slow := head</span><br><span class="line">    fast := head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> fast.Next == <span class="literal">nil</span> || fast.Next.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.Next</span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> slow == fast &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slow = head</span><br><span class="line">    <span class="keyword">for</span> slow != fast &#123;</span><br><span class="line">        slow = slow.Next</span><br><span class="line">        fast = fast.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>簡単にコードの説明をします。</p><p>サイクルがあるかないかの判定に、リストを移動する二つの点を作ります。（ここではslow, fastという変数を用います）<br>名前の通りslowは遅く、fastは速く(slowの2倍の速度で)移動します。<br>もし、このfastがslowに追いついたらサイクルがあるということが言えます。</p><img src="/2020/07/23/1/figure2.png" class=""><p>Aをスタート、Bをサイクルのはじまり、Cを二つの点が重なる地点としています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slow: x+y</span><br><span class="line">fast: x+y+z+y</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2(x+y) &#x3D; x+y+z+y # fastはslowの2倍</span><br><span class="line">2x+2y &#x3D; x+2y+z</span><br><span class="line">x&#x3D;z</span><br></pre></td></tr></table></figure><p>つまり、xとzは同じ距離になることが分かります。<br>これを踏まえると、A,Cからスタートして、2つの点がぶつかるところがサイクルのスタートということになります。<br>簡単に説明しましたが、今回の記事はこれで以上です。</p><p>次の投稿もお楽しみに！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今回は、笹平が担当です。&lt;/p&gt;
&lt;p&gt;LeetCodeというアルゴリズムが学べるサービスがあるので、その中の問題の一つを解いてみました。&lt;br&gt;ちなみに、linked listとは日本語で連結リストと呼ばれ、要素同士がそれぞれリンク情報をもっており、繋がっています。&lt;/p
      
    
    </summary>
    
    
      <category term="Sasahira" scheme="https://light.fusic.co.jp/categories/Sasahira/"/>
    
    
      <category term="LeetCode" scheme="https://light.fusic.co.jp/tags/LeetCode/"/>
    
      <category term="Golang" scheme="https://light.fusic.co.jp/tags/Golang/"/>
    
  </entry>
  
</feed>
